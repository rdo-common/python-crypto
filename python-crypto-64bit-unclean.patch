diff -Naur pycrypto-2.0.org/src/RIPEMD.c pycrypto-2.0/src/RIPEMD.c
--- pycrypto-2.0.org/src/RIPEMD.c	2005-05-05 14:28:28.000000000 +0200
+++ pycrypto-2.0/src/RIPEMD.c	2005-05-05 14:39:12.000000000 +0200
@@ -25,6 +25,8 @@
 #include <netinet/in.h>
 #endif
 
+#include <inttypes.h>
+
 #include "Python.h"
 
 #define MODULE_NAME RIPEMD
@@ -100,11 +102,7 @@
    }
 
 typedef    unsigned char        byte;   /* unsigned 8-bit integer */
-#ifdef __alpha__
-typedef    unsigned int        word;   /* unsigned 32-bit integer */
-#else
-typedef    unsigned long        word;   /* unsigned 32-bit integer */
-#endif
+typedef    uint32_t             word;   /* unsigned 32-bit integer */
 typedef unsigned char   BYTE;
 #define RMD_DATASIZE    64
 #define RMD_DIGESTSIZE  20
diff -Naur pycrypto-2.0.org/src/SHA256.c pycrypto-2.0/src/SHA256.c
--- pycrypto-2.0.org/src/SHA256.c	2005-05-05 14:28:28.000000000 +0200
+++ pycrypto-2.0/src/SHA256.c	2005-05-05 14:41:37.000000000 +0200
@@ -9,22 +9,23 @@
  * Revised Code:  Complies to SHA-256 standard now.
  *
  * Tom St Denis -- http://tomstdenis.home.dhs.org
- * */
+ * */
+#include <inttypes.h>
 #include "Python.h"
 #define MODULE_NAME SHA256
 #define DIGEST_SIZE 32
 
 typedef unsigned char U8;
-typedef unsigned int U32;
+typedef uint32_t U32;
 
 typedef struct {
-    unsigned long state[8], length, curlen;
-    unsigned char buf[64];
+     U32 state[8], length, curlen;
+     U8 buf[64];
 }
 hash_state;
 
 /* the K array */
-static const unsigned long K[64] = {
+static const U32 K[64] = {
     0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL, 0x3956c25bUL,
     0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL, 0xd807aa98UL, 0x12835b01UL,
     0x243185beUL, 0x550c7dc3UL, 0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL,
@@ -53,7 +54,7 @@
 /* compress 512-bits */
 static void sha_compress(hash_state * md)
 {
-    unsigned long S[8], W[64], t0, t1;
+    U32 S[8], W[64], t0, t1;
     int i;
 
     /* copy state into S */
@@ -104,7 +105,7 @@
     md->state[7] = 0x5BE0CD19UL;
 }
 
-void sha_process(hash_state * md, unsigned char *buf, int len)
+void sha_process(hash_state * md, unsigned char *buf, U32 len)
 {
     while (len--) {
         /* copy byte */
